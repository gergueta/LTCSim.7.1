/* symbol.c -- Mid level parse for EDIF */

/* Copyright (C) 1993 -- Data I/O Corporation -- All Rights Reserved.
 *
 * This program is protected under the copyright laws as a published work.
 * It may not be copied, reproduced, further distributed, adaptations
 * made from the same, or used to prepare derivative works, without the
 * prior written consent of the Data I/O Corporation
 *
 * History:
 *    5/05/93 - Included in Version 2.5
 */

#include "stdafx.h"
#include "edifin.h"

extern long integer_value;    /* generated by typedValue */
extern POINT TXxy;            /* generated by display */
extern BYTE font_jus_rot;
extern int text_height;
extern int is_visible;

#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

static void boundingBox()
 {
   Match( '(' );
   MatchKeyword( K_BOUNDINGBOX );
   rectangle( 0 );
   Match( ')' );
 }

static void annotate()
 { char *str;
   int h_jus, v_jus;
   BYTE fjr;
   Match( '(' );
   MatchKeyword( K_ANNOTATE );
   if ( lookahead == '(' )
    { str = stringDisplay();                             /* add these as TEXT */
      if ( str && *str )
       { /* force the text to be justified LEFT, CENTER or RIGHT */
         fjr = font_jus_rot;
         h_jus = (int)( ( fjr & 0x0f ) - 1 ) % 3;
                                /* 0 = left, 1 = mid, 2 = right */
         v_jus = 1 - (int)( 9 - ( fjr & 0x0f ) ) / 3;
                                /* 1 = top, 0 = mid, -1 = bot */
         if ( fjr & 0x10 )
            TXxy.x += v_jus * text_height / 2;
         else
            TXxy.y += v_jus * text_height / 2;
         fjr = (BYTE)( ( fjr & 0xf0 ) | ( 0x4 + h_jus ) );
         Add_Symbol_Text( TXxy, fjr, str );
       }
    }
   else SkipRestOfForm();                                    /* stringValue() */
   Match( ')' );
 }

char* designator()
 { char *str;
   Match( '(' );
   MatchKeyword( K_DESIGNATOR );
   if ( lookahead == '(' ) str = stringDisplay();
   else str = stringValue();
   Match( ')' );
   return( str );                      /* this string is in temporary storage */
 }

PROPERTYDEF* property( int Class )
/* Class indicates what type: Symbol, Pin or Twin?  */
 { int type;
   int attr, ii;
   PROPERTYDEF *def;
   Match( '(' );
   MatchKeyword( K_PROPERTY );
   def = (PROPERTYDEF *)nameDef( Class );                  /* propertyNameDef */
   type = typedValue();         /* string for PIN or SYMBOL, integer for TWIN */
   if ( def )               /* for now type = K_STRING is the only legal type */
    { def->num = 0xff;                             /* number of the attribute */
      def->kind = 0;
      def->type = (BYTE)type;
    }
   if ( !def || type != K_STRING );
   else if ( Class == CELL_PROPERTYCLASS )
    {
      if ( !stricmp( "SymbolType", def->name ) )
       { def->kind = 1;
       }
    }
   else if ( Class == INTERFACE_PROPERTYCLASS )
    {
      attr = GetSymAttrNumber( def->name );
      if ( attr >= 0 )
       { def->num = (BYTE)attr;
         def->kind = 1;
       }
      else
       { /* check to see if it is a titleblock attribute */
         for ( ii = 0; ii < NUMGRAPHICWINDOWS; ii++ )
          { if ( !stricmp( GetAttrWindowName( GRAPHICWIN_File + ii ), def->name ) )
             { def->num = (BYTE)( GRAPHICWIN_File + ii );
               def->kind = 2;
               break;
             }
          }
       }
    }
   else if ( Class == PORT_PROPERTYCLASS )
    {
      attr = GetPinAttrNumber( def->name );
      if ( attr >= 0 )
       { def->num = (BYTE)attr;
         def->kind = 1;
       }
    }

   while ( lookahead == '(' )
    { /* should ignore property if it has unit */
      if ( PeekAtKeyword() == K_UNIT )
       { unit();
         if ( def ) def->type = (BYTE)-1;
       }
      else IgnoreForm();                       /* ignore property in property */
    }
   Match( ')' );
   return( def );
 }

/* given an attribute number add the appropriate text window for that number */
static void add_attr_window( BYTE num, int graphic )
 { int ii;
   int h_jus, v_jus;
   BYTE fjr;
   BYTE win;
   win = 0xff;
   if ( !graphic )
    { ii = GetAttrWindowOfAttr( num );
      if ( ii >= 0 && ii < 255 )
         win = (BYTE)ii;
    }
   else
      win = num;
   if ( win != 255 )
    { /* force the text to be justified LEFT, CENTER or RIGHT */
      fjr = font_jus_rot;
      h_jus = (int)( ( fjr & 0x0f ) - 1 ) % 3;
                        /* 0 = left, 1 = mid, 2 = right */
      v_jus = 1 - (int)( 9 - ( fjr & 0x0f ) ) / 3;
                        /* 1 = top, 0 = mid, -1 = bot */
      if ( fjr & 0x10 )
         TXxy.x += v_jus * text_height / 2;
      else
         TXxy.y += v_jus * text_height / 2;
      fjr = (BYTE)( ( fjr & 0xf0 ) | ( 0x4 + h_jus ) );
      Add_Twin( TXxy, fjr, win );
    }
 }

int symbol_()
 { int key;
   PROPERTYDEF *prop;
   Match( '(' );
   MatchKeyword( K_SYMBOL );
   while ( lookahead == '(' )
    { switch ( PeekAtKeyword() )
       { case K_PORTIMPLEMENTATION:
            portImplementation();
            break;
         case K_FIGURE:
            figure( 1 );
            break;
         case K_ANNOTATE:
            annotate();
            break;
         case K_PROPERTY:
            /* not sure what to do with these properties */
            property( SYMBOL_PROPERTYCLASS );
            break;
         case K_KEYWORDDISPLAY:
            key = keywordDisplay();
            if ( key == K_DESIGNATOR ) add_attr_window( REFNAME, 0 );
            else if ( key == K_CELL ) add_attr_window( NAME+1, 0 );
            else if ( key == K_INSTANCE ) add_attr_window( NAME, 0 );
            break;
         case K_PROPERTYDISPLAY:
            prop = propertyDisplay( INTERFACE_PROPERTYCLASS );
            if ( prop && prop->kind && is_visible )
               add_attr_window( prop->num, prop->kind == 2 );
            break;
         case K_BOUNDINGBOX:
            boundingBox();
            break;
         default:
            IgnoreForm();                     /* ignore other forms in symbol */
            break;
       }
    }
   Match( ')' );
   return( 1 );
 }
